#include "icmp.hpp"
#include "common.hpp"
#include "socket.hpp"

#include <iostream>
#include <string>
#include <chrono>
#include <vector>

using namespace std::chrono;

using std::vector;
using std::string;
using std::cin;
using std::cout;
using std::clog;
using std::endl;

#ifdef DEBUG

// #define DEBUG_PACKET

#endif

namespace traceroute
{
	string targetName;
	Ip targetIp;

	void Usage( )
	{
		clog << "Usage: ./traceroute ip | name" << endl;
	}

	bool ParseArg( int argc, char **argv )
	{
		if( argc != 2 )
		{
			return false;
		}

		targetName = argv[ 1 ];
		targetIp = Dns( targetName );

		return true;
	}

	Ip IpFromICMP( const ICMP &icmp )
	{
		uint8_t ip[ 4 ] = { static_cast<uint8_t>( icmp.Data( )[ 4 ] ),
							static_cast<uint8_t>( icmp.Data( )[ 5 ] ),
							static_cast<uint8_t>( icmp.Data( )[ 6 ] ),
							static_cast<uint8_t>( icmp.Data( )[ 7 ] ) };
		return Ip( ip );
	}

	int Main( int argc, char **argv )
	{
		if( not ParseArg( argc, argv ) )
		{
			Usage( );
			return 1;
		}

		IcmpSocket icmpSocket( targetIp );	
		ICMP icmp( 1 );
		auto initId = icmp.Id( );

		for( int ttl = 1; ttl < 30; ++ttl )
		{
			vector<string> output( 4, "" );

			for( int i = 0; i < 3; ++i )
			{
				icmp.Sequence( ttl * 3 + i );
#ifdef DEBUG_PACKET
				cout << "icmp============";
				cout << icmp.Content( ) << "========";
#endif
				auto start = system_clock::now( );
				icmpSocket.Send( icmp, ttl );

				if( icmpSocket.Recv( icmp ) )
				{
#ifdef DEBUG
					clog << "id = " << icmp.Id( ) << " , " << initId << endl;
					clog << "seq = " << icmp.Sequence( ) << endl;
#endif
					auto end = system_clock::now( );
					auto duration = duration_cast<microseconds>( end - start );	
#ifdef DEBUG_PACKET
					cout << "icmp recv=======";
					cout << icmp.Content( ).substr( 0, 256 );
#endif
					switch( icmp.Type( ) )
					{
						case ICMP_ECHO_REPLY:
						{
#ifdef DEBUG
							clog << "icmp normal." << endl;
#endif
							if( to_string( IpFromICMP( icmp ) ) != "0.0.0.0" )
							{
								output[ 0 ] = to_string( IpFromICMP( icmp ) );
							}
							
							output[ i + 1 ] = to_string( double( duration.count( ) ) / 1000.0 ) + " ms";
							if( i == 2 )
							{
								cout << ttl << ' ';
								for( int i = 0; i < 4; ++i )
								{
									cout << output[ i ] << ' ';
								}
								cout << endl;
								return 0;
							}
							break;
						}
						
						case ICMP_TIME_EXCEEDED:
						{
#ifdef DEBUG
							clog << "icmp time exceeded." << endl;
#endif
							if( to_string( IpFromICMP( icmp ) ) != "0.0.0.0" )
							{
								output[ 0 ] = to_string( IpFromICMP( icmp ) );
							}
							
							output[ i + 1 ] = to_string( double( duration.count( ) ) / 1000.0 ) + " ms";
							if( i == 2 )
							{
								cout << ttl << ' ';
								for( int i = 0; i < 4; ++i )
								{
									cout << output[ i ] << ' ';
								}
								cout << endl;
							}
							break;
						}

						default:
						{
							clog << "Error/Request Type = " << int( icmp.Type( ) )
								<< endl;
						}
						
					}
				}
				else
				{
#ifdef DEBUG
					clog << "recv failed." << endl;
#endif
					if( to_string( IpFromICMP( icmp ) ) != "0.0.0.0" )
					{
						output[ 0 ] = to_string( IpFromICMP( icmp ) );
					}
					
					output[ i + 1 ] = "*";
					if( i == 2 )
					{
						cout << ttl << ' ';
						for( int i = 0; i < 4; ++i )
						{
							cout << output[ i ] << ' ';
						}
						cout << endl;
					}
				}
			}
		}
		return 0;
	}
}

int main( int argc, char **argv )
{
	return traceroute::Main( argc, argv );
}
